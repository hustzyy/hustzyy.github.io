<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜未央的博客</title>
  
  <subtitle>今天比昨天好，就是希望</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hustzyy.github.io/"/>
  <updated>2018-09-10T15:00:08.258Z</updated>
  <id>https://hustzyy.github.io/</id>
  
  <author>
    <name>夜未央</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python高级特性</title>
    <link href="https://hustzyy.github.io/2018/09/09/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>https://hustzyy.github.io/2018/09/09/python高级特性/</id>
    <published>2018-09-09T14:47:17.000Z</published>
    <updated>2018-09-10T15:00:08.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'John'</span>, <span class="string">'Rose'</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">print(L[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># L[0:4]表示从索引0开始取元素，直到索引4为止，但不包括索引4</span></span><br><span class="line"><span class="comment"># list的切片结果仍为List</span></span><br><span class="line"></span><br><span class="line">T = (<span class="string">'John'</span>, <span class="string">'Rose'</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">print(T[:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># tuple的切片结果仍为tuple</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'abcdefg'</span></span><br><span class="line">print(str[<span class="number">-3</span>:])</span><br><span class="line"><span class="comment"># 字符串也可以看成一种list，每个元素就是一个字符，切片结果仍是字符串</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> Map:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> Map.values():</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> Map.items():</span><br><span class="line">    print(key, <span class="string">':'</span>, value)</span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(L)</span><br><span class="line"><span class="comment"># [4, 16, 36, 64, 100]</span></span><br><span class="line"></span><br><span class="line">comb = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br><span class="line">print(comb)</span><br><span class="line"><span class="comment"># ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是访问集合元素的一种方式，从集合的第一个元素开始，到所有元素被访问完结束。</p><p>特点：</p><ul><li>不需要事先准备好整个迭代过程的所有元素（仅仅在迭代到某个元素时才计算该元素），这个特点使得它<strong>特别适用于遍历巨大的数据集</strong>。</li><li>访问者不需要关心迭代器内部的结构，仅需通过next()方法或不断去取下一个内容。</li><li>不可随机访问，只能从头至尾依次遍历。</li></ul><p>（易混淆概念）<strong>可迭代对象和迭代器：</strong></p><pre><code>可以直接作用于for循环的对象统称为可迭代对象(Iterable)。可以被next()函数调用并不断返回下一个值的对象称为迭代器(Iterator)。所有的Iterable均可以通过内置函数iter()来转变为Iterator。</code></pre><h4 id="可迭代对象（iterable）"><a href="#可迭代对象（iterable）" class="headerlink" title="可迭代对象（iterable）"></a>可迭代对象（iterable）</h4><p>凡是定义了返回一个迭代器的—iter—方法，或者定义了可以支持下标索引的—getitem—方法的对象都是可迭代对象。</p><p>例，当运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>实际的执行情况为：<img src="E:\My_Blog\blog\source\images\iterable-vs-iterator.png" alt=""><br>常见的可迭代对象如下：</p><ul><li>集合数据类型：<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</li><li><code>generator</code>，包括生成器和带<code>yield</code>的generator function。</li></ul><p><strong>注意：</strong>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。因为Iterator可以表示一个无限大的数据流，例如全体自然数，而list是永远不可能做到的。</p><h4 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h4><ul><li>可以被<code>next()</code>函数调用并不断返回下一个值得对象称为迭代器。</li><li>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象。</li><li>Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是<strong>惰性</strong>的，只有在需要返回下一个数据时它才会计算。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用迭代器实现斐波那契数列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, limit)</span>:</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">while</span> self.a &gt; self.limit:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib(<span class="number">1000</span>):</span><br><span class="line">    print(n, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h4 id="生成器（generator）"><a href="#生成器（generator）" class="headerlink" title="生成器（generator）"></a>生成器（generator）</h4><p>生成器算得上是Python语言中最吸引人的特性之一，生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。它不需要再像上面的类一样写<code>__iter__()</code>和<code>__next__()</code>方法了，只需要一个<code>yiled</code>关键字。 生成器一定是迭代器（反之不成立），因此任何生成器也是以一种懒加载的模式生成值。</p><p><strong>语法上说，生成器是一个带yield关键字的函数。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://hustzyy.github.io/2018/09/09/Python%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%BB%96%E9%9B%AA%E5%B3%B0%EF%BC%89/"/>
    <id>https://hustzyy.github.io/2018/09/09/Python学习（廖雪峰）/</id>
    <published>2018-09-09T01:15:50.000Z</published>
    <updated>2018-09-10T06:22:07.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><ol><li><p>采用%运算符来格式化字符串，例如：（如果只有一个占位符，括号可以省略）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello, %s, %d&quot; % (&quot;world&quot;, 2018))</span><br></pre></td></tr></table></figure><p> 常见的占位符有：</p><p> | 占位符 | 替换内容     |<br> | —— | ———— |<br> | %d     | 整数         |<br> | %s     | 字符串       |<br> | %f     | 浮点数       |<br> | %x     | 十六进制整数 |</p></li><li><p>采用format()方法</p></li></ol><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = int(input())</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'+'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'-'</span>)</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">lists = [<span class="string">'a'</span>, <span class="number">123</span>, <span class="keyword">True</span>]</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> lists:</span><br><span class="line">    print(elem)</span><br><span class="line"></span><br><span class="line">Sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    Sum += x</span><br><span class="line">print(Sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">Sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    Sum += n</span><br><span class="line">    n += <span class="number">1</span>  <span class="comment"># python中没有++</span></span><br><span class="line">print(Sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环使用else语句</span></span><br><span class="line"><span class="comment"># else中的语句会在循环正常执行完(即for不是通过break跳出而中断的)的情况下执行，while..else类似</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            print(num, <span class="string">"是合数"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num, <span class="string">"是质数"</span>)</span><br></pre></td></tr></table></figure><h2 id="常用集合"><a href="#常用集合" class="headerlink" title="常用集合"></a>常用集合</h2><ul><li><p><strong>list</strong></p><ul><li><p>可变长有序集合，可随时添加和删除元素</p></li><li><p>用索引来访问list中的元素，起始位0，可以用负索引，-1代表最后一个元素</p></li><li><p>list中的元素类型可以不同，如 list = [‘asd’ , 123， True]。其元素也可以是另外一个list</p></li><li><p>常用方法：</p><p>| 方法名              | 功能                 |<br>| ——————- | ——————– |<br>| append（elem）      | 将元素追加到list末尾 |<br>| insert（pos，elem） | 将元素插到指定位置   |<br>| pop（）             | 删除list末尾元素     |<br>| pop（pos）          | 删除指定位置的元素   |<br>| len（list）         | 返回list的长度       |</p></li></ul></li><li><p><strong>tuple</strong></p><ul><li><p>元组，有序列表，初始化之后不可修改，如 t = （’a’, ‘b’, ‘c’）</p></li><li><p>表面变化：t = （’a’, ‘b’, [‘A’, ‘B’]），可以给t[2][0]和t[2][1]重新赋值，实际上t[2]的值并没有变，仍然是list在堆内存中的地址，但list中存的值改变了</p></li></ul></li><li><p><strong>dict</strong></p><ul><li><p>使用键-值（key-value）存储，具有极快的查找速</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"John"</span>: <span class="number">1</span>, <span class="string">"Rose"</span>: <span class="number">2</span>, <span class="string">"Icy"</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(d[<span class="string">"Rose"</span>])</span><br></pre></td></tr></table></figure></li><li><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li><p>查找和插入的时间随着元素的增加而增加；</p></li><li><p>占用空间小，浪费内存很少。</p></li></ol></li></ul></li><li><p><strong>set</strong></p><ul><li><p>set和dict类似，也是一组key的集合，但不存储value；set和dict都不可以放入可变对象。由于key不能重复，所以，在set中，没有重复的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set(range(<span class="number">10</span>))</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li><li><p>常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(key)</span><br><span class="line">s.remove(key)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><strong>空函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p><strong>返回多个值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br><span class="line"></span><br><span class="line">x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line">print(x, y)</span><br><span class="line"></span><br><span class="line">r_tuple = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line">print(r_tuple)</span><br></pre></td></tr></table></figure><p>实际上返回多值是一种假象，Python仍然返回单一值（返回一个tuple）</p></li><li><p><strong>默认参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        s *= x</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">print(power(<span class="number">3</span>))</span><br><span class="line">print(power(<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>注意点：1. 必选参数在前，默认参数在后</p><pre><code>2. 默认参数必须指向不变对象</code></pre></li></ul><ul><li><p><strong>可变参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装成一个tuple</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">var_para</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        count += n</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">print(var_para(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(var_para()) </span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(var_para(*nums))</span><br></pre></td></tr></table></figure></li><li><p><strong>关键字参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数调用时自动组装成一个dict</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **info)</span>:</span></span><br><span class="line">    print(<span class="string">"name:"</span>, name, <span class="string">"age:"</span>, age, <span class="string">"other:"</span>, info)</span><br><span class="line"></span><br><span class="line">print(person(<span class="string">"Bob"</span>, <span class="number">20</span>, sex=<span class="string">"man"</span>, city=<span class="string">"BJ"</span>))</span><br><span class="line"><span class="comment"># name: Bob age: 20 other: &#123;'sex': 'man', 'city': 'BJ'&#125;</span></span><br><span class="line"></span><br><span class="line">extra = &#123;<span class="string">'sex'</span>: <span class="string">'man'</span>, <span class="string">'city'</span>: <span class="string">'SH'</span>&#125;</span><br><span class="line">print(person(<span class="string">'Jack'</span>, <span class="number">21</span>, **extra))</span><br><span class="line"><span class="comment"># ！！！注意info获得的dict是extra的一份拷贝，对info的改动不会影响到函数外的extra</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据格式化&quot;&gt;&lt;a href=&quot;#数据格式化&quot; class=&quot;headerlink&quot; title=&quot;数据格式化&quot;&gt;&lt;/a&gt;数据格式化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;采用%运算符来格式化字符串，例如：（如果只有一个占位符，括号可以省略）&lt;/p&gt;
 &lt;figure 
      
    
    </summary>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello blog</title>
    <link href="https://hustzyy.github.io/2018/09/08/Hello-blog/"/>
    <id>https://hustzyy.github.io/2018/09/08/Hello-blog/</id>
    <published>2018-09-08T11:13:31.000Z</published>
    <updated>2018-09-08T11:13:31.495Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
