<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜未央的博客</title>
  
  <subtitle>今天比昨天好，就是希望</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hustzyy.github.io/"/>
  <updated>2018-10-05T07:56:33.039Z</updated>
  <id>https://hustzyy.github.io/</id>
  
  <author>
    <name>夜未央</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ensemble learning</title>
    <link href="https://hustzyy.github.io/2018/10/05/ensemble-learning/"/>
    <id>https://hustzyy.github.io/2018/10/05/ensemble-learning/</id>
    <published>2018-10-05T07:51:41.000Z</published>
    <updated>2018-10-05T07:56:33.039Z</updated>
    
    <content type="html"><![CDATA[<p>核心：个体学习器要具有<strong>准确性</strong>、<strong>多样性</strong></p><p><img src="/2018/10/05/ensemble-learning/ensemble.PNG" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;核心：个体学习器要具有&lt;strong&gt;准确性&lt;/strong&gt;、&lt;strong&gt;多样性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/10/05/ensemble-learning/ensemble.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="机器学习" scheme="https://hustzyy.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="集成学习" scheme="https://hustzyy.github.io/tags/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Regression</title>
    <link href="https://hustzyy.github.io/2018/09/19/Regression/"/>
    <id>https://hustzyy.github.io/2018/09/19/Regression/</id>
    <published>2018-09-19T12:43:29.000Z</published>
    <updated>2018-10-02T14:37:48.467Z</updated>
    
    <content type="html"><![CDATA[<ul><li>线性回归假设特征和结果满足线性关系。其实线性关系的表达能力非常强大，每个特征对结果的影响强弱可以由前面的参数体现，<strong>而且每个特征变量可以首先映射到一个函数</strong>，然后再参与线性计算。这样就可以表达特征与结果之间的非线性关系。</li></ul><ul><li>预测 y 值和真实 y 值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，所以一般采用平方误差（最小二乘法）</li></ul><ul><li>岭回归：是一种专用于共线性数据分析的有偏估计回归方法，实质上是一种改良的最小二乘估计法，通过放弃最小二乘法的无偏性，以损失部分信息、降低精度为代价获得<a href="https://baike.baidu.com/item/%E5%9B%9E%E5%BD%92%E7%B3%BB%E6%95%B0/10840879" target="_blank" rel="noopener">回归系数</a>更为符合实际、更可靠的回归方法，对病态数据的拟合要强于<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/2522346" target="_blank" rel="noopener">最小二乘法</a>。</li></ul><ul><li>Lasso：Lasso回归于岭回归非常相似，它们的差别在于使用了不同的正则化项。最终都实现了约束参数从而防止过拟合的效果。但是Lasso之所以重要，还有另一个原因是：Lasso能够将一些作用比较小的特征的参数训练为0，从而获得稀疏解。也就是说用这种方法，在训练模型的过程中实现了降维(特征筛选)的目的。</li></ul><ul><li><a href="https://www.cnblogs.com/Belter/p/8536939.html" target="_blank" rel="noopener">https://www.cnblogs.com/Belter/p/8536939.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;线性回归假设特征和结果满足线性关系。其实线性关系的表达能力非常强大，每个特征对结果的影响强弱可以由前面的参数体现，&lt;strong&gt;而且每个特征变量可以首先映射到一个函数&lt;/strong&gt;，然后再参与线性计算。这样就可以表达特征与结果之间的非线性关系。&lt;/li&gt;

      
    
    </summary>
    
      <category term="机器学习" scheme="https://hustzyy.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="线性回归" scheme="https://hustzyy.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Plan</title>
    <link href="https://hustzyy.github.io/2018/09/15/Plan/"/>
    <id>https://hustzyy.github.io/2018/09/15/Plan/</id>
    <published>2018-09-15T12:24:53.000Z</published>
    <updated>2018-09-15T12:39:55.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="研一上（9-16-12-31）："><a href="#研一上（9-16-12-31）：" class="headerlink" title="研一上（9.16 - 12.31）："></a>研一上（9.16 - 12.31）：</h2><ol><li>看完西瓜书加机学实战（一到两个月）</li><li>利用Python进行数据分析（选看）</li><li>做一些Kaggle上的入门项目</li></ol><h2 id="研一下（2-1-6-1）："><a href="#研一下（2-1-6-1）：" class="headerlink" title="研一下（2.1 - 6.1）："></a>研一下（2.1 - 6.1）：</h2><ol><li>看小蓝书加花书（两个月）</li><li>刷经典算法题（LeetCode）</li><li>刷计算机基础专业课知识点</li><li>emmm抱大腿打比赛，为实习做准备</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;研一上（9-16-12-31）：&quot;&gt;&lt;a href=&quot;#研一上（9-16-12-31）：&quot; class=&quot;headerlink&quot; title=&quot;研一上（9.16 - 12.31）：&quot;&gt;&lt;/a&gt;研一上（9.16 - 12.31）：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;看完西瓜
      
    
    </summary>
    
      <category term="emmmm" scheme="https://hustzyy.github.io/categories/emmmm/"/>
    
    
      <category term="计划" scheme="https://hustzyy.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>IO编程</title>
    <link href="https://hustzyy.github.io/2018/09/13/IO%E7%BC%96%E7%A8%8B/"/>
    <id>https://hustzyy.github.io/2018/09/13/IO编程/</id>
    <published>2018-09-13T07:17:36.000Z</published>
    <updated>2018-09-13T08:32:12.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'F:/PyWorkSpace/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:     <span class="comment"># 保证无论是否出错都能正确地关闭文件</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()  <span class="comment"># 文件使用完之后必须关闭</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 简化写法</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'F:/PyWorkSpace/test.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:    <span class="comment"># with语句会自动帮助我们调用close()方法</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line.strip())   <span class="comment"># 把末尾的'\n'删掉</span></span><br></pre></td></tr></table></figure><p>open函数第一个参数是文件的地址，第二个参数是打开文件的模式，默认文件访问模式为只读。以下列出不同的模式：</p><p><img src="/2018/09/13/IO编程/fileMode.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a&gt;文件读写&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="python" scheme="https://hustzyy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程</title>
    <link href="https://hustzyy.github.io/2018/09/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://hustzyy.github.io/2018/09/12/面向对象编程/</id>
    <published>2018-09-12T12:21:47.000Z</published>
    <updated>2018-09-13T07:25:11.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="comment"># 定义类的基本属性</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义类的私有属性，私有属性在类外部无法访问</span></span><br><span class="line">    _weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self._weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有属性可以通过调用类方法来访问</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._weight</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类方法必须包含参数self，且为第一个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'People'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化类对象</span></span><br><span class="line">that = People(<span class="string">'Rose'</span>, <span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line">print(<span class="string">'%s: %d, %d'</span> % (that.name, that.age, that.get_weight()))</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><strong>单继承</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(People)</span>:</span>  <span class="comment"># ()内为继承的类名</span></span><br><span class="line">    grade = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight, grade)</span>:</span></span><br><span class="line">        People.__init__(self, name, age, weight)  <span class="comment"># 调用父类的构造函数</span></span><br><span class="line">        self.grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Student'</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>多继承</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(Base1, Base2, Base3)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>若是父类中有相同的方法名，而在子类使用时未指定，从左到右查找父类中是否包含方法，选用较左边的父类继承过来的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类定义&quot;&gt;&lt;a href=&quot;#类定义&quot; class=&quot;headerlink&quot; title=&quot;类定义&quot;&gt;&lt;/a&gt;类定义&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="https://hustzyy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://hustzyy.github.io/2018/09/11/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://hustzyy.github.io/2018/09/11/函数式编程/</id>
    <published>2018-09-11T09:48:58.000Z</published>
    <updated>2018-09-12T13:41:32.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>函数式编程就是一种抽象程度很高的<strong>编程范式</strong>，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</li><li>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</li><li>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。</li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul><li><strong>变量指向函数</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = abs <span class="comment"># 函数本身也可以赋值给变量，即变量可以指向函数</span></span><br><span class="line">print(f(<span class="number">-10</span>)) <span class="comment"># 变量f已指向abs函数本身，调用f()和调用abs()完全相同</span></span><br></pre></td></tr></table></figure><ul><li><strong>函数名也是变量</strong></li></ul><p>函数名其实就是指向函数的变量！对于<code>abs()</code>这个函数，完全可以把函数名<code>abs</code>看成变量，它指向一个可以计算绝对值的函数！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abs = <span class="number">10</span> <span class="comment"># abs变量重新指向一个整数10而不是指向绝对值函数了</span></span><br><span class="line">abs(<span class="number">-10</span>) <span class="comment"># 抛出异常</span></span><br></pre></td></tr></table></figure><ul><li><strong>传入函数</strong></li></ul><p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">5</span>, <span class="number">-5</span>, abs)) <span class="comment"># 将abs作为参数传入到add函数</span></span><br></pre></td></tr></table></figure><h3 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h3><p><code>map()</code>是 Python 内置的高阶函数，接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p><strong>注意 : python 3.x 中map函数返回的是iterators，无法像python2.x 直接返回一个list，故需要再加上一个list()将iterators转化为一个list</strong>。</p><p><code>reduce()</code>的工作过程是 ：在迭代序列(tuple ，list ，dictionary， string等可迭代物)的过程中，首先把前两个元素传给函数参数，函数加工后，然后把得到的结果和第三个元素作为两个参数传给函数参数， 函数加工后得到的结果又和第四个元素作为两个参数传给函数参数，依次类推。 如果传入了 initial 值， 那么首先传的就不是序列的第一个和第二个元素，而是 initial值和第一个元素。<strong>经过这样的累计计算之后合并序列到一个单一返回值。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS=&#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line"><span class="comment"># 将字符串转化为整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strToint</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">charTonum</span><span class="params">(c)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DIGITS[c]</span><br><span class="line">    <span class="keyword">return</span> reduce(fn, map(charTonum, str))  </span><br><span class="line"><span class="comment"># map产生一个经过charTonum函数处理过的序列，reduce再用fn函数处理这个序列</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter()</code>和<code>map()</code>类似,也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤偶数，保留奇数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(list(filter(is_odd, range(<span class="number">10</span>))))</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list。</p><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span>         <span class="comment"># 内部函数sum可以引用外部函数lazy_sum的参数和局部变量</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> args:</span><br><span class="line">            count += x</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 调用lazy_sum()时，返回的不是求和结果，而是求和函数</span></span><br></pre></td></tr></table></figure><p>当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这称为“闭包（Closure）”程序结构。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>当我们在传入函数时有时候不需要显示地定义函数，直接传入匿名函数更方便。例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x: x * x, range(<span class="number">10</span>)))</span><br><span class="line"><span class="comment"># 匿名函数 lambda x: x * x 际上就是就是：</span></span><br><span class="line"><span class="comment"># def f(x)</span></span><br><span class="line"><span class="comment">#   return x * x</span></span><br></pre></td></tr></table></figure><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数式编程就是一种抽象程度很高的&lt;strong&gt;编程范式&lt;/strong&gt;，纯粹的函数式编程语言编写的函数没有变量，因此，任意一
      
    
    </summary>
    
      <category term="python" scheme="https://hustzyy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python高级特性</title>
    <link href="https://hustzyy.github.io/2018/09/09/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>https://hustzyy.github.io/2018/09/09/python高级特性/</id>
    <published>2018-09-09T14:47:17.000Z</published>
    <updated>2018-09-11T08:59:04.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'John'</span>, <span class="string">'Rose'</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">print(L[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># L[0:4]表示从索引0开始取元素，直到索引4为止，但不包括索引4</span></span><br><span class="line"><span class="comment"># list的切片结果仍为List</span></span><br><span class="line"></span><br><span class="line">T = (<span class="string">'John'</span>, <span class="string">'Rose'</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">print(T[:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># tuple的切片结果仍为tuple</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'abcdefg'</span></span><br><span class="line">print(str[<span class="number">-3</span>:])</span><br><span class="line"><span class="comment"># 字符串也可以看成一种list，每个元素就是一个字符，切片结果仍是字符串</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> Map:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> Map.values():</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> Map.items():</span><br><span class="line">    print(key, <span class="string">':'</span>, value)</span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(L)</span><br><span class="line"><span class="comment"># [4, 16, 36, 64, 100]</span></span><br><span class="line"></span><br><span class="line">comb = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br><span class="line">print(comb)</span><br><span class="line"><span class="comment"># ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是访问集合元素的一种方式，从集合的第一个元素开始，到所有元素被访问完结束。</p><p>特点：</p><ul><li>不需要事先准备好整个迭代过程的所有元素（仅仅在迭代到某个元素时才计算该元素），这个特点使得它<strong>特别适用于遍历巨大的数据集</strong>。</li><li>访问者不需要关心迭代器内部的结构，仅需通过next()方法或不断去取下一个内容。</li><li>不可随机访问，只能从头至尾依次遍历。</li></ul><p>（易混淆概念）<strong>可迭代对象和迭代器：</strong></p><pre><code>可以直接作用于for循环的对象统称为可迭代对象(Iterable)。可以被next()函数调用并不断返回下一个值的对象称为迭代器(Iterator)。所有的Iterable均可以通过内置函数iter()来转变为Iterator。</code></pre><h4 id="可迭代对象（iterable）"><a href="#可迭代对象（iterable）" class="headerlink" title="可迭代对象（iterable）"></a>可迭代对象（iterable）</h4><p>凡是定义了返回一个迭代器的—iter—方法，或者定义了可以支持下标索引的—getitem—方法的对象都是可迭代对象。</p><p>例，当运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>实际的执行情况为：<img src="/2018/09/09/python高级特性/iterable-vs-iterator.png" alt=""><br>常见的可迭代对象如下：</p><ul><li>集合数据类型：<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</li><li><code>generator</code>，包括生成器和带<code>yield</code>的generator function。</li></ul><p><strong>注意：</strong>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。因为Iterator可以表示一个无限大的数据流，例如全体自然数，而list是永远不可能做到的。</p><h4 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h4><ul><li>可以被<code>next()</code>函数调用并不断返回下一个值得对象称为迭代器。</li><li>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象。</li><li>Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是<strong>惰性</strong>的，只有在需要返回下一个数据时它才会计算。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用迭代器实现斐波那契数列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, limit)</span>:</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">while</span> self.a &gt; self.limit:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib(<span class="number">1000</span>):</span><br><span class="line">    print(n, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h2 id="生成器（generator）"><a href="#生成器（generator）" class="headerlink" title="生成器（generator）"></a>生成器（generator）</h2><p>语法上说，生成器是一个带yield关键字的函数。调用生成器函数后会得到一个生成器对象，这个生成器对象实际上就是一个特殊的迭代器，拥有<code>__iter__()</code>和<code>__next__()</code>方法，因此任何生成器也是以一种懒加载的模式生成值，由于它其惰性的，在处理大数据时可以节约大量的内存空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_winter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">yield</span> i  <span class="comment"># 含有yield关键字，即生成器函数</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">       </span><br><span class="line">g = generator_winter()  <span class="comment"># 调用生成器函数，返回一个生成器对象</span></span><br><span class="line"><span class="comment"># ！！！注意！！！ 该语句执行时，函数体中的代码并不会执行，只有显式或隐式地调用next的时候才会真正执行里面的代码。</span></span><br><span class="line"></span><br><span class="line">print(next(g))</span><br><span class="line"><span class="comment"># 等价于print(g.__next__())，每调用一次next方法计算下一个值，通过yield返回该值；迭代完最后一个元素后触发StopIteration异常。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> g:</span><br><span class="line">    print(elem)</span><br><span class="line"><span class="comment"># 也可以使用for循环来迭代该生成器对象（Python中for循环的本质就是通过不断调用next()函数实现的）</span></span><br></pre></td></tr></table></figure><ul><li><strong>生成器的特点：</strong></li></ul><p>正常函数只能返回一次，即return之后该次函数调用就结束了，但是<strong>生成器函数可以暂停执行，并且通过yield返回一个中间值，当生成器对象的<code>__next__()</code>方法再次被调用时，从上一次暂停的地方继续执行，直到出发一个StopIteration。</strong></p><ul><li><strong>触发StopIteration的情况：</strong></li></ul><ol><li>如果没有return，默认执行完整个函数时返回StopIteration</li><li>如果在执行过程中return，直接抛出StopIteration终止迭代</li><li>如果return后返回一个值，那么这个值不是函数的返回值，而是StopIteration异常的说明</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_winter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'again'</span></span><br><span class="line"></span><br><span class="line">g = generator_winter()</span><br><span class="line">print(g.__next__()) <span class="comment"># hello</span></span><br><span class="line">print(g.__next__()) <span class="comment"># 遇到return抛出StopIteration异常，return异常说明</span></span><br></pre></td></tr></table></figure><h4 id="生成器表达式（generator-expression）"><a href="#生成器表达式（generator-expression）" class="headerlink" title="生成器表达式（generator expression）"></a>生成器表达式（generator expression）</h4><p>生成器表达式是列表生成式的生成器版本，只不过它返回的是一个生成器对象而不是列表对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> g:</span><br><span class="line">    print(g.__next__(), end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 1 9 25 49 81</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>容器是一系列元素的集合，str、list、set、dict、file、sockets对象都可以看作是容器，容器都可以被迭代（用在for，while等语句中），因此他们被称为可迭代对象。</li><li>可迭代对象实现了<code>__iter__</code>方法，该方法返回一个迭代器对象。</li><li>迭代器持有一个内部状态的字段，用于记录下次迭代返回值，它实现了<code>__next__</code>和<code>__iter__</code>方法，迭代器不会一次性把所有元素加载到内存，而是需要的时候才生成返回结果。</li><li>生成器是一种特殊的迭代器，它的返回值不是通过<code>return</code>而是用<code>yield</code>。</li></ul><p><img src="/2018/09/09/python高级特性/summary.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="python" scheme="https://hustzyy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://hustzyy.github.io/2018/09/09/python%E5%9F%BA%E7%A1%80/"/>
    <id>https://hustzyy.github.io/2018/09/09/python基础/</id>
    <published>2018-09-09T01:15:50.000Z</published>
    <updated>2018-09-12T14:58:17.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><ol><li><p>采用%运算符来格式化字符串，例如：（如果只有一个占位符，括号可以省略）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello, %s, %d&quot; % (&quot;world&quot;, 2018))</span><br></pre></td></tr></table></figure><p> 常见的占位符有：</p><p> | 占位符 | 替换内容     |<br> | —— | ———— |<br> | %d     | 整数         |<br> | %s     | 字符串       |<br> | %f     | 浮点数       |<br> | %x     | 十六进制整数 |</p></li><li><p>采用format()方法</p></li></ol><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = int(input())</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'+'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'-'</span>)</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">lists = [<span class="string">'a'</span>, <span class="number">123</span>, <span class="keyword">True</span>]</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> lists:</span><br><span class="line">    print(elem)</span><br><span class="line"></span><br><span class="line">Sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    Sum += x</span><br><span class="line">print(Sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">Sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    Sum += n</span><br><span class="line">    n += <span class="number">1</span>  <span class="comment"># python中没有++</span></span><br><span class="line">print(Sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环使用else语句</span></span><br><span class="line"><span class="comment"># else中的语句会在循环正常执行完(即for不是通过break跳出而中断的)的情况下执行，while..else类似</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            print(num, <span class="string">"是合数"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num, <span class="string">"是质数"</span>)</span><br></pre></td></tr></table></figure><h2 id="常用集合"><a href="#常用集合" class="headerlink" title="常用集合"></a>常用集合</h2><ul><li><p><strong>list</strong></p><ul><li><p>可变长有序集合，可随时添加和删除元素</p></li><li><p>用索引来访问list中的元素，起始位0，可以用负索引，-1代表最后一个元素</p></li><li><p>list中的元素类型可以不同，如 list = [‘asd’ , 123， True]。其元素也可以是另外一个list</p></li><li><p>常用方法：</p><p>| 方法名              | 功能                 |<br>| ——————- | ——————– |<br>| append（elem）      | 将元素追加到list末尾 |<br>| insert（pos，elem） | 将元素插到指定位置   |<br>| pop（）             | 删除list末尾元素     |<br>| pop（pos）          | 删除指定位置的元素   |<br>| len（list）         | 返回list的长度       |</p></li></ul></li><li><p><strong>tuple</strong></p><ul><li><p>元组，有序列表，初始化之后不可修改，如 t = （’a’, ‘b’, ‘c’）</p></li><li><p>表面变化：t = （’a’, ‘b’, [‘A’, ‘B’]），可以给<code>t[2][0]</code>和<code>t[2][1]</code>重新赋值，实际上t[2]的值并没有变，仍然是list在堆内存中的地址，但list中存的值改变了</p></li></ul></li><li><p><strong>dict</strong></p><ul><li><p>使用键-值（key-value）存储，具有极快的查找速</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"John"</span>: <span class="number">1</span>, <span class="string">"Rose"</span>: <span class="number">2</span>, <span class="string">"Icy"</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(d[<span class="string">"Rose"</span>])</span><br></pre></td></tr></table></figure></li><li><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li><p>查找和插入的时间随着元素的增加而增加；</p></li><li><p>占用空间小，浪费内存很少。</p></li></ol></li></ul></li><li><p><strong>set</strong></p><ul><li><p>set和dict类似，也是一组key的集合，但不存储value；set和dict都不可以放入可变对象。由于key不能重复，所以，在set中，没有重复的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set(range(<span class="number">10</span>))</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li><li><p>常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(key)</span><br><span class="line">s.remove(key)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><strong>空函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p><strong>返回多个值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br><span class="line"></span><br><span class="line">x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line">print(x, y)</span><br><span class="line"></span><br><span class="line">r_tuple = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line">print(r_tuple)</span><br></pre></td></tr></table></figure><p>实际上返回多值是一种假象，Python仍然返回单一值（返回一个tuple）</p></li><li><p><strong>默认参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        s *= x</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">print(power(<span class="number">3</span>))</span><br><span class="line">print(power(<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>注意点：1. 必选参数在前，默认参数在后</p><pre><code>2. 默认参数必须指向不变对象</code></pre></li></ul><ul><li><p><strong>可变参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装成一个tuple</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">var_para</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        count += n</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">print(var_para(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(var_para()) </span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(var_para(*nums))</span><br></pre></td></tr></table></figure></li><li><p><strong>关键字参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数调用时自动组装成一个dict</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **info)</span>:</span></span><br><span class="line">    print(<span class="string">"name:"</span>, name, <span class="string">"age:"</span>, age, <span class="string">"other:"</span>, info)</span><br><span class="line"></span><br><span class="line">print(person(<span class="string">"Bob"</span>, <span class="number">20</span>, sex=<span class="string">"man"</span>, city=<span class="string">"BJ"</span>))</span><br><span class="line"><span class="comment"># name: Bob age: 20 other: &#123;'sex': 'man', 'city': 'BJ'&#125;</span></span><br><span class="line"></span><br><span class="line">extra = &#123;<span class="string">'sex'</span>: <span class="string">'man'</span>, <span class="string">'city'</span>: <span class="string">'SH'</span>&#125;</span><br><span class="line">print(person(<span class="string">'Jack'</span>, <span class="number">21</span>, **extra))</span><br><span class="line"><span class="comment"># ！！！注意info获得的dict是extra的一份拷贝，对info的改动不会影响到函数外的extra</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据格式化&quot;&gt;&lt;a href=&quot;#数据格式化&quot; class=&quot;headerlink&quot; title=&quot;数据格式化&quot;&gt;&lt;/a&gt;数据格式化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;采用%运算符来格式化字符串，例如：（如果只有一个占位符，括号可以省略）&lt;/p&gt;
 &lt;figure 
      
    
    </summary>
    
      <category term="python" scheme="https://hustzyy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
</feed>
