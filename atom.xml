<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜未央的博客</title>
  
  <subtitle>今天比昨天好，就是希望</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hustzyy.github.io/"/>
  <updated>2018-09-09T04:59:44.710Z</updated>
  <id>https://hustzyy.github.io/</id>
  
  <author>
    <name>夜未央</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习（廖雪峰）</title>
    <link href="https://hustzyy.github.io/2018/09/09/Python%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%BB%96%E9%9B%AA%E5%B3%B0%EF%BC%89/"/>
    <id>https://hustzyy.github.io/2018/09/09/Python学习（廖雪峰）/</id>
    <published>2018-09-09T01:15:50.000Z</published>
    <updated>2018-09-09T04:59:44.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><ol><li><p>采用%运算符来格式化字符串，例如：（如果只有一个占位符，括号可以省略）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello, %s, %d&quot; % (&quot;world&quot;, 2018))</span><br></pre></td></tr></table></figure><p> 常见的占位符有：</p><p> | 占位符 | 替换内容     |<br> | —— | ———— |<br> | %d     | 整数         |<br> | %s     | 字符串       |<br> | %f     | 浮点数       |<br> | %x     | 十六进制整数 |</p></li><li><p>采用format()方法</p></li></ol><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = int(input())</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'+'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'-'</span>)</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">lists = [<span class="string">'a'</span>, <span class="number">123</span>, <span class="keyword">True</span>]</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> lists:</span><br><span class="line">    print(elem)</span><br><span class="line"></span><br><span class="line">Sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    Sum += x</span><br><span class="line">print(Sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">Sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    Sum += n</span><br><span class="line">    n += <span class="number">1</span>  <span class="comment"># python中没有++</span></span><br><span class="line">print(Sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环使用else语句</span></span><br><span class="line"><span class="comment"># else中的语句会在循环正常执行完(即for不是通过break跳出而中断的)的情况下执行，while..else类似</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            print(num, <span class="string">"是合数"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num, <span class="string">"是质数"</span>)</span><br></pre></td></tr></table></figure><h2 id="常用集合"><a href="#常用集合" class="headerlink" title="常用集合"></a>常用集合</h2><ul><li><p><strong>list</strong></p><ul><li><p>可变长有序集合，可随时添加和删除元素</p></li><li><p>用索引来访问list中的元素，起始位0，可以用负索引，-1代表最后一个元素</p></li><li><p>list中的元素类型可以不同，如 list = [‘asd’ , 123， True]。其元素也可以是另外一个list</p></li><li><p>常用方法：</p><p>| 方法名              | 功能                 |<br>| ——————- | ——————– |<br>| append（elem）      | 将元素追加到list末尾 |<br>| insert（pos，elem） | 将元素插到指定位置   |<br>| pop（）             | 删除list末尾元素     |<br>| pop（pos）          | 删除指定位置的元素   |<br>| len（list）         | 返回list的长度       |</p></li></ul></li><li><p><strong>tuple</strong></p><ul><li>元组，有序列表，初始化之后不可修改，如 t = （’a’, ‘b’, ‘c’）</li><li>表面变化：t = （’a’, ‘b’, [‘A’, ‘B’]），可以给t[2][0]和t[2][1]重新赋值，实际上t[2]的值并没有变，仍然是list在堆内存中的地址，但list中存的值改变了</li></ul></li><li><p><strong>dict</strong></p><ul><li><p>使用键-值（key-value）存储，具有极快的查找速</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"John"</span>: <span class="number">1</span>, <span class="string">"Rose"</span>: <span class="number">2</span>, <span class="string">"Icy"</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(d[<span class="string">"Rose"</span>])</span><br></pre></td></tr></table></figure></li><li><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol></li></ul></li><li><p><strong>set</strong></p><ul><li><p>set和dict类似，也是一组key的集合，但不存储value；set和dict都不可以放入可变对象。由于key不能重复，所以，在set中，没有重复的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set(range(<span class="number">10</span>))</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li><li><p>常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(key)</span><br><span class="line">s.remove(key)</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据格式化&quot;&gt;&lt;a href=&quot;#数据格式化&quot; class=&quot;headerlink&quot; title=&quot;数据格式化&quot;&gt;&lt;/a&gt;数据格式化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;采用%运算符来格式化字符串，例如：（如果只有一个占位符，括号可以省略）&lt;/p&gt;
 &lt;figure 
      
    
    </summary>
    
    
      <category term="python" scheme="https://hustzyy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello blog</title>
    <link href="https://hustzyy.github.io/2018/09/08/Hello-blog/"/>
    <id>https://hustzyy.github.io/2018/09/08/Hello-blog/</id>
    <published>2018-09-08T11:13:31.000Z</published>
    <updated>2018-09-08T11:13:31.495Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hustzyy.github.io/2018/09/08/hello-world/"/>
    <id>https://hustzyy.github.io/2018/09/08/hello-world/</id>
    <published>2018-09-08T10:36:14.195Z</published>
    <updated>2018-09-08T10:36:14.195Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
